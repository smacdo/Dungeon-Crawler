#!/usr/bin/ruby
#########################################################################
# Ruby script that handles updating version information for a project.
# This should be integrated as part of a project's build system to ensure
# versioning is correct.
#
# One further note: This script regenerates version.h, which means that
# you must run this script BEFORE your compilation process!
#########################################################################
###
### Project information
###
ProjectInfo =
{
    :name        => "dungeoncrawl",
    :title       => "Dungeon Crawl",
    :description => "A 2d turn based roguelike dungeon crawl clone",
    :version     => [ 0, 1, 1 ],
    :releasetype => "development",      # development, alpha, beta, final
    :author      => "Scott MacDonald",
    :copyright   => "Copyright (c) 2010 Scott MacDonald",
    :email       => "scott@whitespaceconsideredharmful.com",
    :website     => "http://www.whitespaceconsideredharmful.com",
}

###########################################################################
### Script functions                                                    ###
###########################################################################
#
# Prints helpful usage information to the console
#
def printHelp
    puts "usage: ./version.rb v_path w_path r_path"
    puts " where v_path is the path to your version.h file"
    puts "       w_path is the path to your wix.wxs file"
    puts "       r_path is the path to your resource.rc file"
end

#
# Updates the given filepath with a VERSION.H template
def updateOrCreateVersionH( filepath, revision, had_changes, build_date )

    # Create version string (MAJOR.MINOR.PATH-RELEASE)
    versionString =
        "#{ProjectInfo[:version][0]}.#{ProjectInfo[:version][1]}.#{ProjectInfo[:version][2]}"
    versionString = "#{versionString}-#{ProjectInfo[:releasetype]}"

    # Format the had_changes var
    revChangeStr = ""

    if had_changes
        revChangeStr = " (uncomitted changes)"
    end

    # Spit the file out
    File.open( filepath, 'w' ) do |f|
        f.puts "/// AUTOGENERATED VERSION.H - DO NOT MODIFY"
        f.puts "///  (Generated by scripts/versioning.h)"
        f.puts "#ifndef APPLICATION_VERSION_H"
        f.puts "#define APPLICATION_VERSION_H"
        f.puts "#include <string>"
        f.puts " "
        f.puts "namespace Version"
        f.puts "{"
        f.puts "    const std::string TITLE      = \"#{ProjectInfo[:title]}\";"
        f.puts "    const std::string AUTHOR     = \"#{ProjectInfo[:author]}\";"
        f.puts "    const std::string EMAIL      = \"#{ProjectInfo[:email]}\";"
        f.puts "    const std::string WEBSITE    = \"#{ProjectInfo[:website]}\";"
        f.puts "    const std::string COPYRIGHT  = \"#{ProjectInfo[:copyright]}\";"
        f.puts "    const std::string VERSION_S  = \"#{versionString}\";"
        f.puts "    const std::string RELEASE    = \"#{ProjectInfo[:releasetype]}\";"
        f.puts "    const std::string REVISION   = \"#{revision}\";"
        f.puts "    const std::string BUILDREV_S = \"#{revision}#{revChangeStr}\";"
        f.puts "    const std::string BUILD_DATE = \"#{build_date}\";"
        f.puts "}"
        f.puts " "
        f.puts "#endif"
    end

    puts "Generated #{filepath}"
end

###########################################################################
### This is the main() portion of this script                           ###
###########################################################################
# Get the files we need to update
if ARGV.count < 3
    printHelp
    exit
end

versionFilePath = ARGV[0]

# Find the git revision id for this project
revision = `git rev-parse HEAD`

if $?.success? == false
    puts "Failed to invoke git rev-parse HEAD"
    exit
end

# Also query if there are uncommited changes
diff_output = `git diff --cached`
has_changes = ( diff_output != nil or diff_output.length > 0 )

# Okay, lets generate version information now
updateOrCreateVersionH( "src/version.h", revision, has_changes, "2011-12-15 14:50" )
